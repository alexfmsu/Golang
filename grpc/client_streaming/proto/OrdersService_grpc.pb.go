// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.12.4
// source: proto/OrdersService.proto

package orderspb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	OrdersService_PostOrder_FullMethodName = "/lots.OrdersService/PostOrder"
)

// OrdersServiceClient is the client API for OrdersService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OrdersServiceClient interface {
	PostOrder(ctx context.Context, opts ...grpc.CallOption) (OrdersService_PostOrderClient, error)
}

type ordersServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewOrdersServiceClient(cc grpc.ClientConnInterface) OrdersServiceClient {
	return &ordersServiceClient{cc}
}

func (c *ordersServiceClient) PostOrder(ctx context.Context, opts ...grpc.CallOption) (OrdersService_PostOrderClient, error) {
	stream, err := c.cc.NewStream(ctx, &OrdersService_ServiceDesc.Streams[0], OrdersService_PostOrder_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &ordersServicePostOrderClient{stream}
	return x, nil
}

type OrdersService_PostOrderClient interface {
	Send(*OrderRequest) error
	CloseAndRecv() (*OrdersResponse, error)
	grpc.ClientStream
}

type ordersServicePostOrderClient struct {
	grpc.ClientStream
}

func (x *ordersServicePostOrderClient) Send(m *OrderRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *ordersServicePostOrderClient) CloseAndRecv() (*OrdersResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(OrdersResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// OrdersServiceServer is the server API for OrdersService service.
// All implementations should embed UnimplementedOrdersServiceServer
// for forward compatibility
type OrdersServiceServer interface {
	PostOrder(OrdersService_PostOrderServer) error
}

// UnimplementedOrdersServiceServer should be embedded to have forward compatible implementations.
type UnimplementedOrdersServiceServer struct {
}

func (UnimplementedOrdersServiceServer) PostOrder(OrdersService_PostOrderServer) error {
	return status.Errorf(codes.Unimplemented, "method PostOrder not implemented")
}

// UnsafeOrdersServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OrdersServiceServer will
// result in compilation errors.
type UnsafeOrdersServiceServer interface {
	mustEmbedUnimplementedOrdersServiceServer()
}

func RegisterOrdersServiceServer(s grpc.ServiceRegistrar, srv OrdersServiceServer) {
	s.RegisterService(&OrdersService_ServiceDesc, srv)
}

func _OrdersService_PostOrder_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(OrdersServiceServer).PostOrder(&ordersServicePostOrderServer{stream})
}

type OrdersService_PostOrderServer interface {
	SendAndClose(*OrdersResponse) error
	Recv() (*OrderRequest, error)
	grpc.ServerStream
}

type ordersServicePostOrderServer struct {
	grpc.ServerStream
}

func (x *ordersServicePostOrderServer) SendAndClose(m *OrdersResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *ordersServicePostOrderServer) Recv() (*OrderRequest, error) {
	m := new(OrderRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// OrdersService_ServiceDesc is the grpc.ServiceDesc for OrdersService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OrdersService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "lots.OrdersService",
	HandlerType: (*OrdersServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "PostOrder",
			Handler:       _OrdersService_PostOrder_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "proto/OrdersService.proto",
}
